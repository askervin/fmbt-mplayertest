aal "mplayertest" {
    language "python" {
        import pexpect
        import commands
        from time import sleep

        response_time = 1.0 # seconds, mplayer should respond to commands within this time

        def launchMplayer():
            global mplayer
            mplayer = pexpect.spawn("mplayer -idle -slave -quiet 1.mp3 2.mp3")
            sleep(response_time)

        def command(cmd):
            log("mplayer command: " + cmd)
            mplayer.write(cmd + "\n")
            sleep(response_time)
            log("mplayer response: " + mplayer.read_nonblocking(4096, 0))

        def openedMP3File():
            return int(commands.getoutput("basename $(ls -l /proc/" + str(mplayer.pid) +
                "/fd | awk '/mp3/{print $NF}') .mp3"))

        def playing():
            cmd = "pacmd list | grep RUNNING"
            status, output = commands.getstatusoutput(cmd)
            return 0 == status
    }

    # preview-show-vars: song
    # preview-depth: 5
    variables {
        state, song, songcount
    }
    initial_state {
        state = "playing" # either "playing" or "paused"
        song = 1          # number of the song being played
        songcount = 2     # number of songs in current playlist
    }
    adapter_init {
        launchMplayer()
    }
    adapter_exit {
        command("quit")
    }

    input "pause" {
        guard   { return state == "playing" }
        body    { state = "paused" }
        adapter { command("pause") }
    }
    input "continue" {
        guard   { return state == "paused" }
        body    { state = "playing" }
        adapter { command("pause") }
    }
    input "next song" {
        guard   { return song < songcount }
        body    { song += 1 }
        adapter { command("pausing_keep pt_step 1") }
    }
    input "prev song" {
        guard   { return song > 1 }
        body    { song -= 1 }
        adapter { command("pausing_keep pt_step -1") }
    }
    input "next song - already last" {
        guard   { return song == songcount }
        adapter { command("pausing_keep pt_step 1") }
    }
    input "prev song - already first" {
        guard   { return song == 1 }
        adapter { command("pausing_keep pt_step -1") }
    }
    input "add song" {
        guard   { return songcount < 3 }
        body    { songcount += 1 }
        adapter { command("pausing_keep loadfile " + str(songcount+1) + ".mp3 1" ) }
    }
    input "reset playlist" {
        body {
            songcount = 1
            song = 1
        }
        adapter { command("pausing_keep loadfile 1.mp3" ) }
    }

    tag "playing" {
        guard   { return state == "playing" }
        adapter { assert playing() == True, "Player is not playing" }
    }
    tag "paused"  {
        guard   { return state == "paused" }
        adapter { assert playing() == False, "Player is not paused" }
    }
    tag "song==1", "song==2", "song==3" {
        guard   { return eval(tag_name) }
        adapter {
            if state == "playing":
                assert openedMP3File() == song, "Playing incorrect song." + \
                " Expected: %s, observed: %s." % (song, openedMP3File())
        }
    }
}
